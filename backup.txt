models.py

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Favorite(db.Model):
    __tablename__="favorite"
    favorite_id = db.Column(db.Integer, primary_key = True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.user_id'))
    category_id = db.Column(db.Integer, db.ForeignKey('category.category_id'))

    def __repr__(self):
         return '<Favorite %r>' % self.favorite_id

class Attendance(db.Model):
    __tablename__="attendance"
    attendance_id = db.Column(db.Integer, primary_key = True)
    calendar_id = db.Column(db.Integer, db.ForeignKey('calendar.calendar_id'))
    event_id = db.Column(db.Integer, db.ForeignKey('event.event_id'))

    def __repr__(self):
         return '<Attendance %r>' % self.attendance_id

class Auth(db.Model):
    __tablename__="auth"
    id = db.Column(db.Integer, primary_key = True)
    token = db.Column(db.String(100))
    created_at = db.Column(db.DateTime(timezone = False))
    is_valid = db.Column(db.Boolean)
    login_user_id = db.Column(db.Integer, db.ForeignKey('user.user_id'))

    def __repr__(self):
         return '<Auth %r>' % self.token

class User(db.Model):
    __tablename__="user"
    user_id = db.Column(db.Integer, primary_key = True)
    name = db.Column(db.String(25), nullable=False)
    last_name = db.Column(db.String(25), nullable=False)
    email = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(20), nullable=False)
    birthday_date = db.Column(db.String(8))
    auths = db.relationship('Auth', backref ='user')
    calendars = db.relationship('Calendar', backref = 'user') 
    fav_categories = db.Column(db.String(100), db.ForeignKey('category.category_id'))

    def __repr__(self):
         return '<User %r>' % self.name

    def serialize(self):
         return {
             "username": self.name,
             "lastname": self.last_name,
             "email": self.email,
             "password": self.password,
             "birthdaydate": self.birthday_date,
            }


class Calendar(db.Model):
    __tablename__="calendar"
    calendar_id = db.Column(db.Integer, primary_key = True)
    name = db.Column(db.String(25), nullable = False)
    description = db.Column(db.String(300), nullable = True)
    calendar_id_owner = db.Column(db.Integer, db.ForeignKey('user.user_id'))
    attendances = db.relationship('Event', secondary = 'Attendance', backref = 'calendar')

    def __repr__(self):
         return '<Calendar %r>' % self.name

    def serialize(self):
        return {
             "calendar_id": self.calendar_id,
             "namecalendar": self.name,
             "userid": self.user_id
            }

class Category(db.Model):
    __tablename__="category"
    category_id = db.Column(db.Integer, primary_key=True)
    category_name = db.Column(db.String(50), nullable = False)
    events = db.relationship('Event', backref = 'category')
    favs = db.relationship('User', secondary = 'Favorite', backref = 'category')
    
    def __repr__(self):
        return '<Category %r>' % self.category_name

    def serialize(self):
        return {
            "categoryid": self.category_id,
            "categoryname": self.category_name
        }

class Event(db.Model):
    __tablename__="event"
    event_id = db.Column(db.Integer, primary_key = True, unique = True)
    event_name = db.Column(db.String(100), nullable = False)
    description = db.Column(db.String(5000))
    start_time = db.Column(db.String(30))
    end_time = db.Column(db.String(30))
    city = db.Column(db.String(100))
    street = db.Column(db.String(100))
    lat = db.Column(db.Float)
    longi = db.Column(db.Float)
    ticket_url = db.Column(db.String(100))
    is_canceled = db.Column(db.String(100))
    event_category = db.Column(db.String(100), db.ForeignKey('category.category_id'))
    attendances = db.relationship('Calendar', secondary = 'Attendance', backref = 'event')

    def __repr__(self):
        return '<Event %r>' % self.event_id

    def serialize(self):
        return {
             "idevento": self.event_id,
             "nameevento": self.event_name,
             "category": self.event_category,
             "description": self.description,
             "start_time": self.start_time,
             "end_time": self.end_time,
             "latitud": self.lat,
             "longitud": self.longi,
             "place": self.place,
             "street": self.street,
             "ticket_url": self.ticket_url,
             "is_canceled": self.is_canceled,
            }


manage.py

import os
import re
from flask import Flask, jsonify, request
from flask_script import Manager
from flask_migrate import Migrate, MigrateCommand
from models import db, User, Event, Favorite, Attendance, Auth, Calendar, Category
from flask_cors import CORS
from flask_bcrypt import Bcrypt
from flask_jwt_extended import (
    JWTManager, jwt_required, create_access_token,
    get_jwt_identity
)



BASEDIR = os.path.abspath(os.path.dirname(__file__))

app = Flask(__name__)
app.config["SECRET_KEY"] = "secret-key"
app.config['JWT_SECRET_KEY'] = 'encrypt'
app.config["DEBUG"] = True
app.config["ENV"] = "development"
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///" + os.path.join(BASEDIR, "test.db")
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
db.init_app(app)
jwt = JWTManager(app)
bcrypt = Bcrypt(app)
Migrate = Migrate(app,db)
CORS(app) 


Manager = Manager(app)
Manager.add_command("db" , MigrateCommand)

"""

@app.route("/login",methods=["POST"])
def login():
    if not request.is_json:
        return jsonify({"msg": "Missing JSON in request"}), 400
    email = request.json.get('email', None)
    password = request.json.get('password', None)
    if not email:
        return jsonify({"msg": "Missing email parameter"}), 400
    if not password:
        return jsonify({"msg": "Missing password parameter"}), 400
    
    user = User.query.filter_by(email=email).first()

    if user is None:
        return jsonify({"msg": "Email not found"}), 404
    
    if bcrypt.check_password_hash(user.password, password):
        access_token = create_access_token(identity=email)
        data = {
            "access_token": access_token,
            "user" : user.serialize(),
            "msg": "success"
        }
        return jsonify(data), 200


    
@app.route("/signup", methods=["POST"])
def signup():
        #Regular expression that checks a valid email
        ereg = '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
        #Regular expression that checks a valid password
        preg = '^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$'
        # Instancing the a new user
        user = User()
        #Checking email 
        if (re.search(ereg,request.json.get("email"))):
            user.email = request.json.get("email")
        else:
            return "Invalid email format", 400
        #Checking password
        if (re.search(preg,request.json.get('password'))):
            pw_hash = bcrypt.generate_password_hash(request.json.get("password"))
            user.password = pw_hash
        else:
            return "Invalid password format", 400
        #Ask for everything else
        user.firstname = request.json.get("firstname")
        user.lastname = request.json.get("lastname")
        
        db.session.add(user)

        db.session.commit()


        return jsonify({"success": True}), 201 

@app.route("/user/<int:id>", methods=["DELETE", "GET", "PUT"])
@app.route("/users", methods=["GET"])
def user(id=None):
    if request.method == "GET":
        if id is not None:
            user = User.query.get(id)
            return jsonify(user.serialize()), 200
        else:
            user = User.query.all()
            users = list(map(lambda user: user.serialize(), user))
            return jsonify(users), 200

    if request.method == "DELETE": 
        user = User.query.get(id)
        db.session.delete(user)
        db.session.commit()
        return "User has been deleted", 200

    if request.method == "PUT":
        if id is not None: 
            user = User.query.get(id)
            user.firstname = request.json.get("firstname")
            db.session.commit()
            return jsonify(user.serialize()), 201

"""
@app.route('/categories', methods = ['GET'])
def handle_categories():
    categories = Category.query.all()
    return jsonify(categories), 200

@app.route('/event', methods = ['POST', 'GET'])
def event():
    if request.method == "GET":
        event = Event.query.get()
        return jsonify(event.serialize()), 200
    if request.method == "POST":
        event = Event()
        event.event_name = request.json.get("event_name")
        event.description = request.json.get("description")
        event.start_time = request.json.get("start_time")
        event.end_time = request.json.get("end_time")
        event.city = request.json.get("city")
        event.street = request.json.get("street")
        event.lat = request.json.get("lat")
        event.longi = request.json.get("longi")
        event.ticket_url = request.json.get("ticket_url")
        event.is_canceled = request.json.get("is_canceled")
        event.category = request.json.get("category")
        
        db.session.add(event)

        db.session.commit()

if __name__ == "__main__":
    Manager.run()

